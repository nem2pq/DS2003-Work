# Complete the following vectors with the fruit color and quality of taste on a 1-5 scale (5 being delicious)
banana <- c('yellow', 3)
strawberry <- c('red', 5)
pluot <- c('red', 4)
tangerine <- c('orange', 2)
cherry <- c('red', 5)
papaya <- c('orange' 1)
# Complete the following vectors with the fruit color and quality of taste on a 1-5 scale (5 being delicious)
banana <- c('yellow', 3)
strawberry <- c('red', 5)
pluot <- c('red', 4)
tangerine <- c('orange', 2)
cherry <- c('red', 5)
papaya <- c('orange', 1)
# construct a matrix where each fruit is a row. Call this matrix 'fruit'
fruit <- matrix(data = c(banana, strawberry, pluot, tangerine, cherry, papaya, nrows = 6))
fruit
# construct a matrix where each fruit is a row. Call this matrix 'fruit'
fruit <- matrix(data = c(banana, strawberry, pluot, tangerine, cherry, papaya, nrows = 6, ncol = 2))
fruit
# construct a matrix where each fruit is a row. Call this matrix 'fruit'
fruit <- matrix(data = c(banana, strawberry, pluot, tangerine, cherry, papaya), nrows = 6, ncol = 2))
# Complete the following vectors with the fruit color and quality of taste on a 1-5 scale (5 being delicious)
banana <- c('yellow', 3)
strawberry <- c('red', 5)
pluot <- c('red', 4)
tangerine <- c('orange', 2)
cherry <- c('red', 5)
papaya <- c('orange', 1)
# construct a matrix where each fruit is a row. Call this matrix 'fruit'
fruit <- matrix(data = c(banana, strawberry, pluot, tangerine, cherry, papaya), nrows = 6))
# construct a matrix where each fruit is a row. Call this matrix 'fruit'
fruit <- matrix(data = c(banana, strawberry, pluot, tangerine, cherry, papaya), nrow = 6))
# Combine the 6 vectors into a single vector called 'fruit'
fruit <- c(banana, strawberry, pluot, tangerine, cherry, papaya)
# construct a matrix where each fruit is a row. Call this matrix 'fruit'
fruit_matrix <- matrix(fruit, nrow = 6))
# construct a matrix where each fruit is a row. Call this matrix 'fruit'
fruit_matrix <- matrix(fruit, nrow = 6)
fruit_matrix
# construct a matrix where each fruit is a row. Call this matrix 'fruit'
fruit_matrix <- matrix(fruit, ncol = 2)
fruit_matrix
# Combine the 6 vectors into a single vector called 'fruit'
fruit <- c(banana, strawberry, pluot, tangerine, cherry, papaya)
fruit
# Name the columns 'color' and 'taste'
column <- c('color', 'taste')
colnames(fruit_matrix, column)
# Name the columns 'color' and 'taste'
column <- c('color', 'taste')
fruit_matrix <- colnames(column)
# Name the columns 'color' and 'taste'
column <- c('color', 'taste')
fruit_matrix <- colnames(column)
fruit_matrix
# construct a matrix where each fruit is a row. Call this matrix 'fruit'
fruit_matrix <- matrix(fruit, ncol = 6, byrow = TRUE)
fruit_matrix
# construct a matrix where each fruit is a row. Call this matrix 'fruit'
fruit_matrix <- matrix(fruit, nrow = 6, byrow = TRUE)
fruit_matrix
# Name the columns 'color' and 'taste'
column <- c('color', 'taste')
fruit_matrix <- colnames(column)
fruit_matrix
# Name the columns 'color' and 'taste'
column <- c('color', 'taste')
colnames(fruit_matrix) <- column
# Name the columns 'color' and 'taste'
column <- c('color', 'taste')
colnames(fruit_matrix) <- c('color', 'taste')
# Name the columns 'color' and 'taste'
column <- c('color', 'taste')
rownames(fruit_matrix) <- c('color', 'taste')
# construct a matrix where each fruit is a row. Call this matrix 'fruit'
fruit_matrix <- matrix(fruit, nrow = 6, byrow = TRUE)
fruit_matrix
# Name the columns 'color' and 'taste'
column <- c('color', 'taste')
rownames(fruit_matrix) <- c('color', 'taste')
# Name the rows the respective fruits
rows <- c('banana', 'strawberry', 'pluot', 'tangerine', 'cherry', 'papaya')
rownames(fruit_matrix) <- rows
# Name the columns 'color' and 'taste'
columns <- c('color', 'taste')
rownames(fruit_matrix) <- columns
# Name the rows the respective fruits
rows <- c('banana', 'strawberry', 'pluot', 'tangerine', 'cherry', 'papaya')
rownames(fruit_matrix) <- rows
# Name the rows the respective fruits
rows <- c('banana', 'strawberry', 'pluot', 'tangerine', 'cherry', 'papaya')
rownames(fruit_matrix) <- rows
fruit_matrix
# Name the columns 'color' and 'taste'
columns <- c('color', 'taste')
rownames(fruit_matrix) <- columns
# Sum the 'taste' column
colSums(fruit_matrix[,2])
# Sum the 'taste' column
colSums(fruit_matrix[2, ])
# Sum the 'taste' column
colSums(fruit_matrix[, 2])
# Complete the following vectors with the fruit color and quality of taste on a 1-5 scale (5 being delicious)
banana <- c('yellow', 3)
strawberry <- c('red', 5)
pluot <- c('red', 4)
tangerine <- c('orange', 2)
cherry <- c('red', 5)
papaya <- c('orange', 1)
# Combine the 6 vectors into a single vector called 'fruit'
fruit <- c(banana, strawberry, pluot, tangerine, cherry, papaya)
fruit
# construct a matrix where each fruit is a row. Call this matrix 'fruit'
fruit_matrix <- matrix(fruit, nrow = 6, byrow = TRUE)
fruit_matrix
# Name the rows the respective fruits
rows <- c('banana', 'strawberry', 'pluot', 'tangerine', 'cherry', 'papaya')
rownames(fruit_matrix) <- rows
fruit_matrix
# Name the columns 'color' and 'taste'
columns <- c('color', 'taste')
rownames(fruit_matrix) <- columns
# Name the columns 'color' and 'taste'
columns <- c('color', 'taste')
colnames(fruit_matrix) <- columns
fruit_matrix
# Sum the 'taste' column
colSums(fruit_matrix[, 'taste'])
# Sum the 'taste' column
colSums(fruit_matrix)
View(fruit_matrix)
# Sum the 'taste' column
fruit_matrix <- as.numeric(fruit_matrix[,2])
# Sum the 'taste' column
fruit_matrix <- as.numeric(fruit_matrix[,2])
fruit_matrix
# construct a matrix where each athlete is a row. Call this matrix 'stat_matrix'
stats_matrix <- matrix(stats, nrow = 4, byrow = TRUE)
# Combine the 6 vectors into a single vector called 'stats'
stats <- c(athleteA, athleteB, athleteC, athleteD)
# Below are vectors of basketball athletes and their total points and total rebounds during one game.
athleteA <- c(15, 3)
athleteB <- c(20, 5)
athleteC <- c(10, 8)
athleteD <- c(12, 2)
# Combine the 6 vectors into a single vector called 'stats'
stats <- c(athleteA, athleteB, athleteC, athleteD)
stats
# construct a matrix where each athlete is a row. Call this matrix 'stat_matrix'
stats_matrix <- matrix(stats, nrow = 4, byrow = TRUE)
stats_matrix
# Name the rows the respective fruits
rows <- c('banana', 'strawberry', 'pluot', 'tangerine', 'cherry', 'papaya')
rownames(fruit_matrix) <- rows
# Name the rows the respective fruits
rows <- c('athleteA', 'athleteB', 'athleteC', 'athleteD')
rownames(stats_matrix) <- rows
stats_matrix
# Name the columns 'color' and 'taste'
columns <- c('points', 'rebounds')
colnames(stats_matrix) <- columns
stats_matrix
# Sum the 'taste' column
colSum(stats_matrix)
# Sum the 'taste' column
colSums(stats_matrix)
# Create a 5th athlete and add their points and rebounds to the stats_matrix
# Create a 5th athlete and add their points and rebounds to the stats_matrix
athleteD <- c(15, 1)
name <- 'athleteD'
athleteD_matrix <- matrix(athleteD,
nrow = 1, byrow = TRUE,
dimnames = list(rows, name))
# Create a 5th athlete and add their points and rebounds to the stats_matrix
athleteD <- c(15, 1)
name <- c('athleteD')
athleteD_matrix <- matrix(athleteD,
nrow = 1, byrow = TRUE,
dimnames = list(rows, name))
# Create a 5th athlete and add their points and rebounds to the stats_matrix
athleteD <- c(15, 1)
name <- c('athleteD')
athleteD_matrix <- matrix(athleteD,
nrow = 1, byrow = TRUE,
dimnames = list(columns, name))
# Create a 5th athlete and add their points and rebounds to the stats_matrix
athleteD <- c(15, 1)
name <- c('athleteD')
athleteD_matrix <- matrix(athleteD,
nrow = 1, byrow = TRUE,
dimnames = list(name, columns))
# Create a 5th athlete and add their points and rebounds to the stats_matrix
athleteD <- c(15, 1)
name <- c('athleteD')
athleteD_matrix <- matrix(athleteD,
nrow = 1, byrow = TRUE,
dimnames = list(name, columns))
team_matrix <- rbind(stats_matrix, athleteD_matrix)
# Create a 5th athlete and add their points and rebounds to the stats_matrix
athleteD <- c(15, 1)
name <- c('athleteD')
athleteD_matrix <- matrix(athleteD,
nrow = 1, byrow = TRUE,
dimnames = list(name, columns))
team_matrix <- rbind(stats_matrix, athleteD_matrix)
team_matrix
# Create a vector of factor variables "high", "med", and "low"
fquality <- c("high", "med", "low")
# Create a vector of factor variables "high", "med", and "low"
quality <- c("high", "med", "low")
fqualtiy <- as.factor(quality)
# Rename factors to 'h', 'm', 'l'
levels(fquality) <- c('h', 'm', 'l')
# Rename factors to 'h', 'm', 'l'
levels(fquality) <- c('h', 'm', 'l')
fquality
# Load the dataset; assign the dataframe to an object called 'titanic'
titanic <- read.csv("/Users/noahmcintire/Desktop/DS2003/DS2003-Assignment 3/data/titanic.csv")
# Look at the first 6 rows of data
head(titanic)
# (1) define the variable 'fare' (2) assign this column to vector called 'fare' & sort values from smallest to largest
# fare:
fare <- titanic$fare
sort.int(fare, decreasing = FALSE)
fare
# (1) define the variable 'fare' (2) assign this column to vector called 'fare' & sort values from smallest to largest
# fare:
fare <- titanic$fare
fare <-sort.int(fare, decreasing = FALSE)
fare
# subset the dataframe to include passengers in 2nd class and include the columns for name, age, and sex
subset(titanic, pclass == 2, c(name, age, sex))
# subset the dataframe to include passengers in 2nd class and include the columns for name, age, and sex
titanic_2 <- subset(titanic, pclass == 2, c(name, age, sex))
titanic_2
# How many NAs are in the full dataset?
is.na(titanic)
# How many NAs are in the 'age' column? (hint: you may need to Google)
# How many NAs are in the full dataset?
Sum(is.na(titanic))
# How many NAs are in the full dataset?
sum(is.na(titanic))
# How many NAs are in the 'age' column? (hint: you may need to Google)
# How many NAs are in the full dataset?
sum(is.na(titanic))
# How many NAs are in the 'age' column? (hint: you may need to Google)
sum(is.na(titanic$age))
# How many NAs are in the full dataset?
summary(titanic)
# How many NAs are in the 'age' column? (hint: you may need to Google)
sum(is.na(titanic$age))
# How many NAs are in the full dataset?
summary(titanic)
# How many NAs are in the 'age' column? (hint: you may need to Google)
sum(is.na(titanic$survived))
# How many NAs are in the full dataset?
sum(is.na(titanic))
# How many NAs are in the 'age' column? (hint: you may need to Google)
sum(is.na(titanic$age))
# print summary statistics for the dataset
summary(titanic)
# What is the average ticket price for a first class ticket?
# (optional: round to 2 decimal points)
mean(subset(titanic, pclass == 1, c(fare)))
# What is the average ticket price for a first class ticket?
# (optional: round to 2 decimal points)
mean(subset(titanic, pclass == 1)$fare)
# Recode the variable 'sex' so that 'male' becomes 'm' and 'female' becomes 'f'
levels(titanic$sex) <- c('m', 'f')
titanic$sex
# Recode the variable 'sex' so that 'male' becomes 'm' and 'female' becomes 'f'
levels(titanic$sex) <- c("m", "f")
titanic$sex
# Recode the variable 'sex' so that 'male' becomes 'm' and 'female' becomes 'f'
titanic$sex<- factor(titanic$sex, order=TRUE, levels= c("m", "f"))
titanic$sex
# Load the dataset; assign the dataframe to an object called 'titanic'
titanic <- read.csv("/Users/noahmcintire/Desktop/DS2003/DS2003-Assignment 3/data/titanic.csv")
# Look at the first 6 rows of data
head(titanic)
# (1) define the variable 'fare' (2) assign this column to vector called 'fare' & sort values from smallest to largest
# fare:
fare <- titanic$fare
fare <-sort.int(fare, decreasing = FALSE)
fare
# subset the dataframe to include passengers in 2nd class and include the columns for name, age, and sex
titanic_2 <- subset(titanic, pclass == 2, c(name, age, sex))
titanic_2
# How many NAs are in the full dataset?
sum(is.na(titanic))
# How many NAs are in the 'age' column? (hint: you may need to Google)
sum(is.na(titanic$age))
# Recode the variable 'sex' so that 'male' becomes 'm' and 'female' becomes 'f'
titanic <- replace(titanic$sex, titanic$sex == "male", "m")
titanic <- replace(titanic$sex, titanic$sex == "female", "f")
# Recode the variable 'sex' so that 'male' becomes 'm' and 'female' becomes 'f'
titanic <- replace(titanic$sex, titanic$sex == "male", "m")
# Recode the variable 'sex' so that 'male' becomes 'm' and 'female' becomes 'f'
titanic$sex <- replace(titanic$sex, titanic$sex == "male", "m")
# Recode the variable 'sex' so that 'male' becomes 'm' and 'female' becomes 'f'
titanic$sex[titanic$sex=="male"]<-"m"
# Recode the variable 'sex' so that 'male' becomes 'm' and 'female' becomes 'f'
#titanic$sex[titanic$sex=="male"]<-"m"
#titanic$sex[titanic$sex=="female"]<-"f"
titanic$sex
# Recode the variable 'sex' so that 'male' becomes 'm' and 'female' becomes 'f'
#titanic$sex[titanic$sex=="male"]<-"m"
#titanic$sex[titanic$sex=="female"]<-"f"
titanic$fare
# Load the dataset; assign the dataframe to an object called 'titanic'
titanic <- read.csv("/Users/noahmcintire/Desktop/DS2003/DS2003-Assignment 3/data/titanic.csv")
# Look at the first 6 rows of data
head(titanic)
# (1) define the variable 'fare' (2) assign this column to vector called 'fare' & sort values from smallest to largest
# fare:
fare <- titanic$fare
fare <-sort.int(fare, decreasing = FALSE)
fare
# subset the dataframe to include passengers in 2nd class and include the columns for name, age, and sex
titanic_2 <- subset(titanic, pclass == 2, c(name, age, sex))
titanic_2
# Recode the variable 'sex' so that 'male' becomes 'm' and 'female' becomes 'f'
titanic$sex[titanic$sex=="male"]<-"m"
titanic$sex[titanic$sex=="female"]<-"f"
# Recode the variable 'sex' so that 'male' becomes 'm' and 'female' becomes 'f'
titanic$sex[titanic$sex=="male"]<-"m"
titanic$sex[titanic$sex=="female"]<-"f"
titanic$sex
# Recode the variable 'sex' so that 'male' becomes 'm' and 'female' becomes 'f'
titanic$sex[titanic$sex=="male"]<-"m"
titanic$sex[titanic$sex=="female"]<-"f"
head(titanic$sex)
# Plot a histogram for the fare price using attach()
attach(titanic)
hist(titanic$fare)
detach(titanic)
# Using lattice plot a histogram of fare price by port
# If unfamiliar, you will need to look up the lattice package
# histogram(~ variable | dividing variable, data = data_name)
histogram(titanic$fare / titanic$embarked, data = titanic)
library(lattice)
# Using lattice plot a histogram of fare price by port
# If unfamiliar, you will need to look up the lattice package
# histogram(~ variable | dividing variable, data = data_name)
histogram(titanic$fare / titanic$embarked, data = titanic)
# Using lattice plot a histogram of fare price by port
# If unfamiliar, you will need to look up the lattice package
# histogram(~ variable | dividing variable, data = data_name)
histogram(titanic$fare | titanic$embarked, data = titanic)
# Using lattice plot a histogram of fare price by port
# If unfamiliar, you will need to look up the lattice package
# histogram(~ variable | dividing variable, data = data_name)
histogram(fare | embarked, data = titanic)
# Using lattice plot a histogram of fare price by port
# If unfamiliar, you will need to look up the lattice package
# histogram(~ variable | dividing variable, data = data_name)
histogram(titanic$fare | titanic$embarked, data = titanic)
# Using lattice plot a histogram of fare price by port
# If unfamiliar, you will need to look up the lattice package
# histogram(~ variable | dividing variable, data = data_name)
histogram(titanic$fare, titanic$embarked, data = titanic)
# Using lattice plot a histogram of fare price by port
# If unfamiliar, you will need to look up the lattice package
# histogram(~ variable | dividing variable, data = data_name)
histogram(titanic$fare, titanic$embarked)
# Using lattice plot a histogram of fare price by port
# If unfamiliar, you will need to look up the lattice package
# histogram(~ variable | dividing variable, data = data_name)
histogram(titanic$fare titanic$embarked)
# Using lattice plot a histogram of fare price by port
# If unfamiliar, you will need to look up the lattice package
# histogram(~ variable | dividing variable, data = data_name)
histogram(titanic$fare | titanic$embarked)
# Using lattice plot a histogram of fare price by port
# If unfamiliar, you will need to look up the lattice package
# histogram(~ variable | dividing variable, data = data_name)
histogram(~ titanic$fare | titanic$embarked)
# Using lattice plot a histogram of fare price by port
# If unfamiliar, you will need to look up the lattice package
# histogram(~ variable | dividing variable, data = data_name)
histogram(~ titanic$fare | titanic$embarked)
sum(is,na(titanic$embarked))
# Using lattice plot a histogram of fare price by port
# If unfamiliar, you will need to look up the lattice package
# histogram(~ variable | dividing variable, data = data_name)
histogram(~ titanic$fare | titanic$embarked)
sum(is.na(titanic$embarked))
# Using lattice plot a histogram of fare price by port
# If unfamiliar, you will need to look up the lattice package
# histogram(~ variable | dividing variable, data = data_name)
histogram(~ titanic$fare | titanic$embarked)
# Create a barplot of cabin class vs sex
barplot(titanic$pclass, titanic$sex)
# Create a barplot of cabin class vs sex
barplot(c(titanic$pclass,titanic$sex))
# (1) create a vector of 10 numbers which includes a few NAs (2) confirm it is a vector (3) sum the missing values (4) remove the missing values from your vector and then remove your vector object from the workspace
vect <- c(1, , 3, 4, 5, , 7, , 9, )
# (1) create a vector of 10 numbers which includes a few NAs (2) confirm it is a vector (3) sum the missing values (4) remove the missing values from your vector and then remove your vector object from the workspace
vect <- c(1, NA, 3, 4, 5, NA, 7, NA, 9, NA)
# (1) create a vector of 10 numbers which includes a few NAs (2) confirm it is a vector (3) sum the missing values (4) remove the missing values from your vector and then remove your vector object from the workspace
vect <- c(1, NA, 3, 4, 5, NA, 7, NA, 9, NA)
typeof(vect)
# (1) create a vector of 10 numbers which includes a few NAs (2) confirm it is a vector (3) sum the missing values (4) remove the missing values from your vector and then remove your vector object from the workspace
vect <- c(1, NA, 3, 4, 5, NA, 7, NA, 9, NA)
typeof(vect)
sum(vect, na.rm = TRUE)
vect <- vect[!is.na(vect)]
rm(vect)
# (1) create a vector of 10 numbers which includes a few NAs (2) confirm it is a vector (3) sum the missing values (4) remove the missing values from your vector and then remove your vector object from the workspace
vect <- c(1, NA, 3, 4, 5, NA, 7, NA, 9, NA)
typeof(vect)
sum(vect, na.rm = TRUE)
vect <- vect[!is.na(vect)]
vect
rm(vect)
# (1) create a matrix of numbers from 1 to 500 going by 2's that is 25 rows by 10 columns (2) confirm it is a matrix (3) get the dimensions of the matrix (4) subset rows 10-15 and columns 3-6 (5)
m <- matrix(seq(1, 500, by=2), nrows=25, ncols=10)
# (1) create a matrix of numbers from 1 to 500 going by 2's that is 25 rows by 10 columns (2) confirm it is a matrix (3) get the dimensions of the matrix (4) subset rows 10-15 and columns 3-6 (5)
m <- matrix(seq(1, 500, by=2), nrow=25, ncol=10)
typeof(m)
dim(m)
m[c(10:15), c(3:6)]
# (1) create a matrix of numbers from 1 to 500 going by 2's that is 25 rows by 10 columns (2) confirm it is a matrix (3) get the dimensions of the matrix (4) subset rows 10-15 and columns 3-6 (5)
m <- matrix(seq(1, 500, by=2), nrow=25, ncol=10)
is.matrix(m)
dim(m)
m[c(10:15), c(3:6)]
# (1) create a vector of 10 numbers which includes a few NAs (2) confirm it is a vector (3) sum the missing values (4) remove the missing values from your vector and then remove your vector object from the workspace
vect <- c(1, NA, 3, 4, 5, NA, 7, NA, 9, NA)
is.vector(vect)
sum(vect, na.rm = TRUE)
vect <- vect[!is.na(vect)]
vect
rm(vect)
# Create a barplot of cabin class vs sex
barplot(titanic$pclass)
# Create a barplot of cabin class vs sex
barplot(table(titanic$pclass), main = 'Passenger Class')
# Create a barplot of cabin class vs sex
barplot(table(titanic$pclass, titanic$sex), main = 'Passenger Class')
# Create a barplot of cabin class vs sex
barplot(table(titanic$sex, titanic$pclass), main = 'Passenger Class')
# Create a barplot of cabin class vs sex
barplot(table(titanic$pclass, titanic$sex), main = 'Passenger Class', legend = TRUE)
# Create a barplot of cabin class vs sex
barplot(table(titanic$pclass, titanic$sex), main = 'Passenger Class by Sex', legend = TRUE)
# (1) define the variable 'fare' (2) assign this column to vector called 'fare' & sort values from smallest to largest
# fare:
fare <- titanic$fare
fare <-sort.int(fare, decreasing = FALSE)
head(fare, 20)
