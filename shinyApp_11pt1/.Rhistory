plotOutput("diaplot")
)
))
server <- function(input, output){
output$diaplot <- renderPlot({
ggplot(diabetes, aes(x=Glucose, y=BloodPressure)) + geom_point(alpha=0.3) + geom_smooth(method="loess", formula=y~x, se=FALSE, span=input$span, degree=input$degree) + theme_bw()
})}
shinyApp(ui = ui, server = server)
diabetes <- read.csv('diabetes.csv')
head(diabetes)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("degree", label = h3("Select Degree:"),
choices = list("0" = 0, "1" = 1, "2" = 2),
selected = 1),
sliderInput("span", label = h3("Span adjustment:"),
min = 0.2, max = 0.9, value = 0.5, step = 0.1)
),
mainPanel(
plotOutput("diaplot")
)
))
server <- function(input, output){
output$diaplot <- renderPlot({
ggplot(diabetes, aes(x=Glucose, y=BloodPressure)) + geom_point(alpha=0.3) + geom_smooth(method="loess", formula=y~x, se=FALSE, span=input$span, d=input$degree) + theme_bw()
})}
shinyApp(ui = ui, server = server)
diabetes <- read.csv('diabetes.csv')
head(diabetes)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("degree", label = h3("Select Degree:"),
choices = list("0" = 0, "1" = 1, "2" = 2),
selected = 1),
sliderInput("span", label = h3("Span adjustment:"),
min = 0.2, max = 0.9, value = 0.5, step = 0.1)
),
mainPanel(
plotOutput("diaplot")
)
))
server <- function(input, output){
output$diaplot <- renderPlot({
ggplot(diabetes, aes(x=Glucose, y=BloodPressure)) + geom_point(alpha=0.3) + geom_smooth(method="loess", formula=y~x, se=FALSE, span=input$span, degree=input$degree) + theme_bw()
})}
shinyApp(ui = ui, server = server)
diabetes <- read.csv('diabetes.csv')
head(diabetes)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("degree", label = h3("Select Degree:"),
choices = list("0" = 0, "1" = 1, "2" = 2),
selected = 1),
sliderInput("span", label = h3("Span adjustment:"),
min = 0.2, max = 0.9, value = 0.5, step = 0.1)
),
mainPanel(
plotOutput("diaplot")
)
))
server <- function(input, output){
output$diaplot <- renderPlot({
ggplot(diabetes, aes(x=Glucose, y=BloodPressure, degree=input$degree)) + geom_point(alpha=0.3) + geom_smooth(method="loess", formula=y~x, se=FALSE, span=input$span) + theme_bw()
})}
shinyApp(ui = ui, server = server)
diabetes <- read.csv('diabetes.csv')
head(diabetes)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("degree", label = h3("Select Degree:"),
choices = list("0" = 0, "1" = 1, "2" = 2),
selected = 1),
sliderInput("span", label = h3("Span adjustment:"),
min = 0.2, max = 0.9, value = 0.5, step = 0.1)
),
mainPanel(
plotOutput("diaplot")
)
))
server <- function(input, output){
output$diaplot <- renderPlot({
ggplot(diabetes, aes(x=Glucose, y=BloodPressure)) + geom_point(alpha=0.3) + geom_smooth(method="loess", formula=y~x, se=FALSE, span=input$span, n=input$degree) + theme_bw()
})}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(shiny)
covid <- read.csv('WHO-COVID-19-global-table-data.csv')
covid$mortalityRate <- covid$Deaths...cumulative.total / covid$Cases...cumulative.total
# make a subset of just 3 countries per region
covid$country <- row.names(covid)
covidSubset <- covid[covid$country %in% c("France", "Germany", "Italy", "Republic of Korea", "Jqpan", "Australia", "Argentina", "Mexico", "Iran (Islamic Republic of)", "Canada", "India", "Indonesia", "Thailand", "South Africa", "Iraq", "Jordan", "Ethiopa", "Kenya", "Zambia"),]
# the input panel just needs to select who region"
ui <- fluidPage(
selectInput("Region", label = "Who Region:", choices = c("Africa", "Americas", "Eastern Mediterranean", "Europe", "South-East Asia", "Western Pacific"), selected = "Africa"),
plotOutput("mortplot"))
# Calculate SE and add for error bars
server <- function(input, output){
output$mortplot <- renderPlot({
covidSubset1 <- covidSubset[covidSubset$Name == input$Region,]
ggplot(covidSubset1, aes(x=country, y=mortalityRate)) + geom_bar(stat="identity") + ylab('Mortality Rate') +
xlab('Country') + labs(title="Mortality Rate in Various WHO Regions") + theme_bw() + geom_errorbar(aes(ymin = mortalityRate - (sd(covid$mortalityRate)/sqrt(length((covid$mortalityRate)))), ymax = mortalityRate + (sd(covid$mortalityRate)/sqrt(length((covid$mortalityRate))))), width = 0.2) +theme_bw()
})}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput("Region", label = "Who Region:", choices = c("Africa", "Americas", "Eastern Mediterranean", "Europe", "South-East Asia", "Western Pacific"), selected = "Africa"),
plotOutput("mortplot"))
# Calculate SE and add for error bars
server <- function(input, output){
output$mortplot <- renderPlot({
covidSubset1 <- covidSubset[covidSubset$Name == input$Region,]
se <- sd(covid$mortalityRate)/sqrt(length(covid$mortalityRate))
ggplot(covidSubset1, aes(x=country, y=mortalityRate)) + geom_bar(stat="identity") + ylab('Mortality Rate') +
xlab('Country') + labs(title="Mortality Rate in Various WHO Regions") + theme_bw() + geom_errorbar(aes(ymin = mortalityRate-se, ymax = mortalityRate+se)) +theme_bw()
})}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput("Region", label = "Who Region:", choices = c("Africa", "Americas", "Eastern Mediterranean", "Europe", "South-East Asia", "Western Pacific"), selected = "Africa"),
plotOutput("mortplot"))
# Calculate SE and add for error bars
server <- function(input, output){
output$mortplot <- renderPlot({
covidSubset1 <- covidSubset[covidSubset$Name == input$Region,]
se <- sd(covid$mortalityRate)/sqrt(length(covid$mortalityRate))
ggplot(covidSubset1, aes(x=country, y=mortalityRate)) + geom_bar(stat="identity") + ylab('Mortality Rate') +
xlab('Country') + labs(title="Mortality Rate in Various WHO Regions") + theme_bw() + geom_errorbar(ymin = mortalityRate-se, ymax = mortalityRate+se) +theme_bw()
})}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput("Region", label = "Who Region:", choices = c("Africa", "Americas", "Eastern Mediterranean", "Europe", "South-East Asia", "Western Pacific"), selected = "Africa"),
plotOutput("mortplot"))
# Calculate SE and add for error bars
server <- function(input, output){
output$mortplot <- renderPlot({
covidSubset1 <- covidSubset[covidSubset$Name == input$Region,]
se <- sd(covid$mortalityRate)/sqrt(length(covid$mortalityRate))
ggplot(covidSubset1, aes(x=country, y=mortalityRate)) + geom_bar(stat="identity") + ylab('Mortality Rate') +
xlab('Country') + labs(title="Mortality Rate in Various WHO Regions") + theme_bw() + geom_errorbar(ymin = covidSubset1$mortalityRate-se, ymax = covidSubset1$mortalityRate+se) +theme_bw()
})}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput("Region", label = "Who Region:", choices = c("Africa", "Americas", "Eastern Mediterranean", "Europe", "South-East Asia", "Western Pacific"), selected = "Africa"),
plotOutput("mortplot"))
# Calculate SE and add for error bars
server <- function(input, output){
output$mortplot <- renderPlot({
covidSubset1 <- covidSubset[covidSubset$Name == input$Region,]
se <- sd(covid$mortalityRate)/sqrt(length(covid$mortalityRate))
ggplot(covidSubset1, aes(x=country, y=mortalityRate)) + geom_bar(stat="identity") + ylab('Mortality Rate') +
xlab('Country') + labs(title="Mortality Rate in Various WHO Regions") + theme_bw() + geom_errorbar(aes(ymin = y-se, ymax = y +se, alpha=0.6, width = .4)) +theme_bw()
})}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput("Region", label = "Who Region:", choices = c("Africa", "Americas", "Eastern Mediterranean", "Europe", "South-East Asia", "Western Pacific"), selected = "Africa"),
plotOutput("mortplot"))
# Calculate SE and add for error bars
server <- function(input, output){
output$mortplot <- renderPlot({
covidSubset1 <- covidSubset[covidSubset$Name == input$Region,]
se <- sd(covid$mortalityRate)/sqrt(length(covid$mortalityRate))
print(se)
ggplot(covidSubset1, aes(x=country, y=mortalityRate)) + geom_bar(stat="identity") + ylab('Mortality Rate') +
xlab('Country') + labs(title="Mortality Rate in Various WHO Regions") + theme_bw() + geom_errorbar(aes(ymin = y-se, ymax = y+se, width = .4)) +theme_bw()
})}
shinyApp(ui = ui, server = server)
# make a subset of just 3 countries per region
covid$country <- row.names(covid)
covidSubset <- covid[covid$country %in% c("France", "Germany", "Italy", "Republic of Korea", "Jqpan", "Australia", "Argentina", "Mexico", "Iran (Islamic Republic of)", "Canada", "India", "Indonesia", "Thailand", "South Africa", "Iraq", "Jordan", "Ethiopa", "Kenya", "Zambia"),]
# the input panel just needs to select who region"
se <- sd(covid$mortalityRate)/sqrt(length(covid$mortalityRate))
print(se)
# make a subset of just 3 countries per region
covid$country <- row.names(covid)
covidSubset <- covid[covid$country %in% c("France", "Germany", "Italy", "Republic of Korea", "Jqpan", "Australia", "Argentina", "Mexico", "Iran (Islamic Republic of)", "Canada", "India", "Indonesia", "Thailand", "South Africa", "Iraq", "Jordan", "Ethiopa", "Kenya", "Zambia"),]
# the input panel just needs to select who region"
se <- sd(covid$mortalityRate)
print(se)
covid <- read.csv('WHO-COVID-19-global-table-data.csv')
covid$mortalityRate <- covid$Deaths...cumulative.total / covid$Cases...cumulative.total
print(covid$mortalityRate)
# make a subset of just 3 countries per region
covid$country <- row.names(covid)
covidSubset <- covid[covid$country %in% c("France", "Germany", "Italy", "Republic of Korea", "Jqpan", "Australia", "Argentina", "Mexico", "Iran (Islamic Republic of)", "Canada", "India", "Indonesia", "Thailand", "South Africa", "Iraq", "Jordan", "Ethiopa", "Kenya", "Zambia"),]
# the input panel just needs to select who region"
se <- sd(na.omit(covid$mortalityRate))
print(se)
# make a subset of just 3 countries per region
covid$country <- row.names(covid)
covidSubset <- covid[covid$country %in% c("France", "Germany", "Italy", "Republic of Korea", "Jqpan", "Australia", "Argentina", "Mexico", "Iran (Islamic Republic of)", "Canada", "India", "Indonesia", "Thailand", "South Africa", "Iraq", "Jordan", "Ethiopa", "Kenya", "Zambia"),]
# the input panel just needs to select who region"
se <- sd(na.omit(covid$mortalityRate))/sqrt(length(na.omit(covid$mortalityRate)))
print(se)
covid <- read.csv('WHO-COVID-19-global-table-data.csv')
covid$mortalityRate <- covid$Deaths...cumulative.total / covid$Cases...cumulative.total
print(covid$mortalityRate)
covid <- read.csv('WHO-COVID-19-global-table-data.csv')
covid$mortalityRate <- covid$Deaths...cumulative.total / covid$Cases...cumulative.total
# make a subset of just 3 countries per region
covid$country <- row.names(covid)
covidSubset <- covid[covid$country %in% c("France", "Germany", "Italy", "Republic of Korea", "Jqpan", "Australia", "Argentina", "Mexico", "Iran (Islamic Republic of)", "Canada", "India", "Indonesia", "Thailand", "South Africa", "Iraq", "Jordan", "Ethiopa", "Kenya", "Zambia"),]
ui <- fluidPage(
selectInput("Region", label = "Who Region:", choices = c("Africa", "Americas", "Eastern Mediterranean", "Europe", "South-East Asia", "Western Pacific"), selected = "Africa"),
plotOutput("mortplot"))
# Calculate SE and add for error bars
server <- function(input, output){
output$mortplot <- renderPlot({
covidSubset1 <- covidSubset[covidSubset$Name == input$Region,]
se <- sd(na.omit(covid$mortalityRate))/sqrt(length(na.omit(covid$mortalityRate)))
ggplot(covidSubset1, aes(x=country, y=mortalityRate)) + geom_bar(stat="identity") + ylab('Mortality Rate') +
xlab('Country') + labs(title="Mortality Rate in Various WHO Regions") + theme_bw() + geom_errorbar(aes(ymin = y-se, ymax = y+se, width = .4)) +theme_bw()
})}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput("Region", label = "Who Region:", choices = c("Africa", "Americas", "Eastern Mediterranean", "Europe", "South-East Asia", "Western Pacific"), selected = "Africa"),
plotOutput("mortplot"))
# Calculate SE and add for error bars
server <- function(input, output){
output$mortplot <- renderPlot({
covidSubset1 <- covidSubset[covidSubset$Name == input$Region,]
se <- sd(na.omit(covid$mortalityRate))/sqrt(length(na.omit(covid$mortalityRate)))
ggplot(covidSubset1, aes(x=country, y=mortalityRate)) + geom_bar(stat="identity") + ylab('Mortality Rate') +
xlab('Country') + labs(title="Mortality Rate in Various WHO Regions") + theme_bw() + geom_errorbar(aes(ymin = y-se, ymax = y+se)) +theme_bw()
})}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput("Region", label = "Who Region:", choices = c("Africa", "Americas", "Eastern Mediterranean", "Europe", "South-East Asia", "Western Pacific"), selected = "Africa"),
plotOutput("mortplot"))
# Calculate SE and add for error bars
server <- function(input, output){
output$mortplot <- renderPlot({
covidSubset1 <- covidSubset[covidSubset$Name == input$Region,]
se <- sd(na.omit(covid$mortalityRate))/sqrt(length(na.omit(covid$mortalityRate)))
ggplot(covidSubset1, aes(x=country, y=mortalityRate)) + geom_bar(stat="identity") + ylab('Mortality Rate') +
xlab('Country') + labs(title="Mortality Rate in Various WHO Regions") + #geom_errorbar(aes(ymin = y-se, ymax = y+se)) +theme_bw()
})}
ui <- fluidPage(
selectInput("Region", label = "Who Region:", choices = c("Africa", "Americas", "Eastern Mediterranean", "Europe", "South-East Asia", "Western Pacific"), selected = "Africa"),
plotOutput("mortplot"))
# Calculate SE and add for error bars
server <- function(input, output){
output$mortplot <- renderPlot({
covidSubset1 <- covidSubset[covidSubset$Name == input$Region,]
se <- sd(na.omit(covid$mortalityRate))/sqrt(length(na.omit(covid$mortalityRate)))
ggplot(covidSubset1, aes(x=country, y=mortalityRate)) + geom_bar(stat="identity") + ylab('Mortality Rate') +
xlab('Country') + labs(title="Mortality Rate in Various WHO Regions") #geom_errorbar(aes(ymin = y-se, ymax = y+se)) +theme_bw()
})}
shinyApp(ui = ui, server = server)
# make a subset of just 3 countries per region
covid$country <- row.names(covid)
covidSubset <- covid[covid$country %in% c("France", "Germany", "Italy", "Republic of Korea", "Jqpan", "Australia", "Argentina", "Mexico", "Iran (Islamic Republic of)", "Canada", "India", "Indonesia", "Thailand", "South Africa", "Iraq", "Jordan", "Ethiopa", "Kenya", "Zambia"),]
se <- sd(na.omit(covid$mortalityRate))/sqrt(length(na.omit(covid$mortalityRate)))
print(se)
ui <- fluidPage(
selectInput("Region", label = "Who Region:", choices = c("Africa", "Americas", "Eastern Mediterranean", "Europe", "South-East Asia", "Western Pacific"), selected = "Africa"),
plotOutput("mortplot"))
# Calculate SE and add for error bars
server <- function(input, output){
output$mortplot <- renderPlot({
covidSubset1 <- covidSubset[covidSubset$Name == input$Region,]
ggplot(covidSubset1, aes(x=country, y=mortalityRate)) + geom_bar(stat="identity") + ylab('Mortality Rate') +
xlab('Country') + labs(title="Mortality Rate in Various WHO Regions") + geom_errorbar(aes(ymin = mortalityRate-se, ymax = mortalityRate+se)) +theme_bw()
})}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput("Region", label = "Who Region:", choices = c("Africa", "Americas", "Eastern Mediterranean", "Europe", "South-East Asia", "Western Pacific"), selected = "Africa"),
plotOutput("mortplot"))
# Calculate SE and add for error bars
server <- function(input, output){
output$mortplot <- renderPlot({
covidSubset1 <- covidSubset[covidSubset$Name == input$Region,]
ggplot(covidSubset1, aes(x=country, y=mortalityRate)) + geom_bar(stat="identity") + ylab('Mortality Rate') +
xlab('Country') + labs(title="Mortality Rate in Various WHO Regions") + geom_errorbar(aes(ymin = mortalityRate-se, ymax = mortalityRate+se, width = 0.4)) +theme_bw()
})}
shinyApp(ui = ui, server = server)
diabetes <- read.csv('diabetes.csv')
head(diabetes)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("degree", label = h3("Select Degree:"),
choices = list("0" = 0, "1" = 1, "2" = 2),
selected = 1),
sliderInput("span", label = h3("Span adjustment:"),
min = 0.2, max = 0.9, value = 0.5, step = 0.1)
),
mainPanel(
plotOutput("diaplot")
)
))
server <- function(input, output){
output$diaplot <- renderPlot({
ggplot(diabetes, aes(x=Glucose, y=BloodPressure)) + geom_point(alpha=0.3) + geom_smooth(method="loess", formula=y~poly(x, deg[input$degree]), se=FALSE, span=input$span) + theme_bw()
})}
shinyApp(ui = ui, server = server)
diabetes <- read.csv('diabetes.csv')
head(diabetes)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("degree", label = h3("Select Degree:"),
choices = list("0" = 0, "1" = 1, "2" = 2),
selected = 1),
sliderInput("span", label = h3("Span adjustment:"),
min = 0.2, max = 0.9, value = 0.5, step = 0.1)
),
mainPanel(
plotOutput("diaplot")
)
))
server <- function(input, output){
output$diaplot <- renderPlot({
ggplot(diabetes, aes(x=Glucose, y=BloodPressure)) + geom_point(alpha=0.3) + geom_smooth(method="loess", formula=y~x, se=FALSE, span=input$span) + theme_bw()
})}
shinyApp(ui = ui, server = server)
diabetes <- read.csv('diabetes.csv')
head(diabetes)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("degree", label = h3("Select Degree:"),
choices = list("0" = 0, "1" = 1, "2" = 2),
selected = 1),
sliderInput("span", label = h3("Span adjustment:"),
min = 0.2, max = 0.9, value = 0.5, step = 0.1)
),
mainPanel(
plotOutput("diaplot")
)
))
server <- function(input, output){
output$diaplot <- renderPlot({
ggplot(diabetes, aes(x=Glucose, y=BloodPressure)) + geom_point(alpha=0.3) + geom_smooth(method="lm", formula=y~poly(x, deg[input$degree]), se=FALSE, span=input$span) + theme_bw()
})}
shinyApp(ui = ui, server = server)
diabetes <- read.csv('diabetes.csv')
head(diabetes)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("degree", label = h3("Select Degree:"),
choices = list("0" = 0, "1" = 1, "2" = 2),
selected = 1),
sliderInput("span", label = h3("Span adjustment:"),
min = 0.2, max = 0.9, value = 0.5, step = 0.1)
),
mainPanel(
plotOutput("diaplot")
)
))
server <- function(input, output){
output$diaplot <- renderPlot({
ggplot(diabetes, aes(x=Glucose, y=BloodPressure)) + geom_point(alpha=0.3) + geom_smooth(method="loess", formula=y~poly(x, input$degree), se=FALSE, span=input$span) + theme_bw()
})}
shinyApp(ui = ui, server = server)
diabetes <- read.csv('diabetes.csv')
head(diabetes)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("degree", label = h3("Select Degree:"),
choices = list("0" = 0, "1" = 1, "2" = 2),
selected = 1),
sliderInput("span", label = h3("Span adjustment:"),
min = 0.2, max = 0.9, value = 0.5, step = 0.1)
),
mainPanel(
plotOutput("diaplot")
)
))
server <- function(input, output){
output$diaplot <- renderPlot({
ggplot(diabetes, aes(x=Glucose, y=BloodPressure)) + geom_point(alpha=0.3) + geom_smooth(method="loess", formula=y ~ poly(x, input$degree), se=FALSE, span=input$span) + theme_bw()
})}
shinyApp(ui = ui, server = server)
diabetes <- read.csv('diabetes.csv')
head(diabetes)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("degree", label = h3("Select Degree:"),
choices = list("0" = 0, "1" = 1, "2" = 2),
selected = 1),
sliderInput("span", label = h3("Span adjustment:"),
min = 0.2, max = 0.9, value = 0.5, step = 0.1)
),
mainPanel(
plotOutput("diaplot")
)
))
server <- function(input, output){
output$diaplot <- renderPlot({
ggplot(diabetes, aes(x=Glucose, y=BloodPressure)) + geom_point(alpha=0.3) + geom_smooth(method="loess", formula=y ~ poly(x, 2), se=FALSE, span=input$span) + theme_bw()
})}
shinyApp(ui = ui, server = server)
diabetes <- read.csv('diabetes.csv')
head(diabetes)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("degree", label = h3("Select Degree:"),
choices = list( 0, 1, 2),
selected = 2),
sliderInput("span", label = h3("Span adjustment:"),
min = 0.2, max = 0.9, value = 0.5, step = 0.1)
),
mainPanel(
plotOutput("diaplot")
)
))
server <- function(input, output){
output$diaplot <- renderPlot({
ggplot(diabetes, aes(x=Glucose, y=BloodPressure)) + geom_point(alpha=0.3) + geom_smooth(method="loess", formula=y ~ poly(x, input$degree), se=FALSE, span=input$span) + theme_bw()
})}
shinyApp(ui = ui, server = server)
diabetes <- read.csv('diabetes.csv')
head(diabetes)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("degree", label = h3("Select Degree:"),
choices = list( 0, 1, 2),
selected = 2),
sliderInput("span", label = h3("Span adjustment:"),
min = 0.2, max = 0.9, value = 0.5, step = 0.1)
),
mainPanel(
plotOutput("diaplot")
)
))
server <- function(input, output){
output$diaplot <- renderPlot({
ggplot(diabetes, aes(x=Glucose, y=BloodPressure)) + geom_point(alpha=0.3) + geom_smooth(method="loess", formula=y ~ poly(x, as.numeric(input$degree)), se=FALSE, span=input$span) + theme_bw()
})}
shinyApp(ui = ui, server = server)
diabetes <- read.csv('diabetes.csv')
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("degree", label = h3("Select Degree:"),
choices = list( 0, 1, 2),
selected = 2),
sliderInput("span", label = h3("Span adjustment:"),
min = 0.2, max = 0.9, value = 0.5, step = 0.1)
),
mainPanel(
plotOutput("diaplot")
)
))
server <- function(input, output){
output$diaplot <- renderPlot({
ggplot(diabetes, aes(x=Glucose, y=BloodPressure)) + geom_point(alpha=0.3) + geom_smooth(method="loess", formula=y ~ poly(x, as.numeric(input$degree)), se=FALSE, span=input$span) + theme_bw()
})}
shinyApp(ui = ui, server = server)
diabetes <- read.csv('diabetes.csv')
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("degree", label = h3("Select Degree:"),
choices = list( 0, 1, 2),
selected = 2),
sliderInput("span", label = h3("Span adjustment:"),
min = 0.2, max = 0.9, value = 0.5, step = 0.1)
),
mainPanel(
plotOutput("diaplot")
)
))
server <- function(input, output){
output$diaplot <- renderPlot({
ggplot(diabetes, aes(x=Glucose, y=BloodPressure)) + geom_point(alpha=0.3) + geom_smooth(method="loess", formula=y ~ poly(x, as.numeric(input$degree)), se=FALSE, span=input$span) + theme_bw()
})}
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='nem2pq', token='FF11749501378541B0ADCE3F468C09A4', secret='ewf1bVraWMgTQyMvRE+nzAk5LK/xKOMcK7QDzUFu')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(shiny)
diabetes <- read.csv('diabetes.csv')
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("degree", label = h3("Select Degree:"),
choices = list( 0, 1, 2),
selected = 2),
sliderInput("span", label = h3("Span adjustment:"),
min = 0.2, max = 0.9, value = 0.5, step = 0.1)
),
mainPanel(
plotOutput("diaplot")
)
))
server <- function(input, output){
output$diaplot <- renderPlot({
ggplot(diabetes, aes(x=Glucose, y=BloodPressure)) + geom_point(alpha=0.3) + geom_smooth(method="loess", formula=y ~ poly(x, as.numeric(input$degree)), se=FALSE, span=input$span) + theme_bw()
})}
shinyApp(ui = ui, server = server)
getwd()
setwd("/Users/noahmcintire/Desktop/DS2003/shinyApp_Assignment11")
getwd()
library(shiny)
runApp()
deployApp()
library(rsconnect)
deployApp()
setwd("/Users/noahmcintire/Desktop/DS2003/shinyApp_11pt1")
runApp()
deployApp()
